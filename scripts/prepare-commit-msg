#!/usr/bin/env python3

import os
import re
import sys
import subprocess

def get_current_branch():
    """Get the current git branch name."""
    try:
        result = subprocess.run(['git', 'symbolic-ref', '--short', 'HEAD'], 
                               capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        print("Error: Failed to get current branch name.")
        return None

def extract_jira_id(branch_name):
    """Extract JIRA task ID from branch name."""
    pattern = r'([A-Z]+-[0-9]+)'
    match = re.search(pattern, branch_name)
    if match:
        return match.group(1)
    return None

def is_rebasing():
    """Check if we're in the middle of a rebase."""
    try:
        git_dir = subprocess.run(['git', 'rev-parse', '--git-dir'], 
                                capture_output=True, text=True, check=True).stdout.strip()
        return (os.path.exists(os.path.join(git_dir, 'rebase-merge')) or 
                os.path.exists(os.path.join(git_dir, 'rebase-apply')))
    except subprocess.CalledProcessError:
        print("Error: Failed to determine rebase status.")
        return False

def main():
    # Validate args
    if len(sys.argv) != 2:
        print("Usage: prepare-commit-msg <commit-msg-file>")
        sys.exit(1)
    
    commit_msg_file = sys.argv[1]
    
    # Get branch name and extract JIRA ID
    branch_name = get_current_branch()
    if not branch_name:
        sys.exit(0)  # Exit silently if we can't get branch name
    
    jira_id = extract_jira_id(branch_name)
    if not jira_id:
        print(f"Warning: Could not find JIRA task ID in branch name: {branch_name}")
        sys.exit(0)  # Continue with commit without adding JIRA ID
    
    # Read the current commit message
    try:
        with open(commit_msg_file, 'r') as f:
            commit_msg = f.read()
    except IOError:
        print(f"Error: Could not read commit message file: {commit_msg_file}")
        sys.exit(1)
    
    # Only add JIRA ID if it's not already in the commit message
    if f"[{jira_id}]" not in commit_msg:
        new_commit_msg = f"[{jira_id}] {commit_msg}"
        
        try:
            with open(commit_msg_file, 'w') as f:
                f.write(new_commit_msg)
            
            # Provide feedback based on whether we're rebasing or not
            if is_rebasing():
                print(f"Added JIRA ID [{jira_id}] to commit message during rebase")
            else:
                print(f"Added JIRA ID [{jira_id}] to commit message")
        except IOError:
            print(f"Error: Could not write to commit message file: {commit_msg_file}")
            sys.exit(1)

if __name__ == "__main__":
    main()